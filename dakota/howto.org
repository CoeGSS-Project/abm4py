#+TITLE: How to integrate Dakota into your model  
#+DATE:    
#+AUTHOR:    
#+LANGUAGE:  de
#+OPTIONS:   H:5 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+LaTeX_CLASS_OPTIONS: [10pt]
#+LATEX_HEADER: \usepackage[a4paper, pdftex, vmarginratio=1:2, width=14.28cm, height=21cm]{geometry}
#+LATEX_HEADER: \usepackage{textcomp}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{ulem}
#+LATEX_HEADER: \newcommand{\task}[1]{\textcolor{red}{#1}}

# ulem commands:
# \uline{important}  % unterstreichen
# \uuline{urgent}    % doppelt unterstreichen
# \uwave{boat}       % unterschlÃ¤ngeln
# \sout{wrong}       % durchstreichen
# \xout{removed}     % ausstreichen mit //////.



* Adjust your model

TODO: exec dakota files


The parameters that are set by dakota must be accessed in the model
via ~world.getParameter()~. The calls to ~world.setParameter()~ are
ignored when the run was started by Dakota. So if you have e.g. a lines like

\begin{verbatim}
IMITATION = 0.2
foo = IMITATION
\end{verbatim}

you must rewrite this as

\begin{verbatim}
world.setParameter('imitation', 0.2)
foo = world.getParameter('imitation')
\end{verbatim}

* Create a response-script 

The results of a simulation are returned to dakota in an own python
script that is called after the simulation has run. As the script is
called in the same python process that also called the simulation, you
can access the results directly from the memory. This script must
contain one function, calcResponses. If you e.g. calculate the error by
comparing the simulation results with real data in a function called
calcError, the response-script could look like:

\begin{verbatim}
def calcResponses():
    reportResponse('error', world.calcError())
\end{verbatim}


* Create a config file

Dakota must know which parameters should be set, and which results
(respones) are returned. This in done via a "Dakota input file" (which
has the fileending ~.in~). This can be done by hand (using the Dakota
documentation), but we have added also some scripts that supports this
process (you can also uses this scripts as a starting point and tweak
the ~.in~ files afterwards). This is especially usefull if you have many
parameters or responses which you can generate from a list (e.g. of
regions or years).

TODO: add documentation about the config script

* Generate the Dakota input
Run the script ~create-infile-from-template.py~ to generate the
Dakota input file. The script needs three arguments
1. fileName of template (dakota input file)
2. configuration fileName (python file)
3. fileName of generated dakota input file

so e.g.
\begin{verbatim}
python create-infile-from-template.py 
    templates/sampling-template.in
    configs/examples-02-bass-diffusion-synthetic.py
    sample-bass-diffusion-synthetic.in
\end{verbatim}
would generate the dakota input file ~sample-bass-diffusion-synthetic.in~

Open this file to edit the study specific parts, e.g. the number of
samples that should be drawn, or the ~evaluation_concurrency~ (which is
set to 8 by default). 

* On clusters: Adjust the 'run-simulation.sh' script

The script ~dakota-wrapper.py~ (which in turn then run the model with the
Dakota calls the ~run-simulation.sh~ script, which by default then run
filename given in the config-file). In the case that the environment
variable ~SYSTEM_NAME~ is set to "eagle", it starts the
~run-simulation.sl~ batch script. You must adjust the slurm parameters
like walltime, number of processes etc. directly in the
~run-simulation.sl~ file.

* Run dakota
On the workstation just run:
~dakota -i DAKOTA_INPUT_FILE~

On the eagle you must do this from a worker node which must load the
~dakota/6.8~ module.

* Convert results for shiny 
\begin{verbatim}
dakota_restart_util to_tabular DAKOTA_INPUT_FILE.rst dakota.tabular
sed -r 's/[ ]+/,/g' dakota.tabular > dakota.csv
\end{verbatim}

# * Start shiny
# Move into the shiny subfolder and start shiny (I have added a batch
# script to /usr/bin called 'shiny'). Then open in a webbrowser
# http://192.168.15.14:3864/



# | $\delta__a$ \ $\delta__e$ | demandGood | calculateSupply |
# |-----------------+------------+-----------------|
# | Household       |        100 |               0 |
# | Firm            |          0 |            1000 |
